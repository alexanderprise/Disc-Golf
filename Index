<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Disc Golf Course Finder</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- PWA Manifest Link -->
    <link rel="manifest" href="manifest.json">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        /* Styles for the modals */
        .modal-backdrop {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 40;
            justify-content: center;
            align-items: center;
            overflow-y: auto; /* Allow scrolling on small screens */
            padding: 1rem;
        }
        .modal {
            max-width: 500px;
            width: 100%;
            max-height: 90vh;
        }
        /* Full screen modal for scorecard */
        .fullscreen-modal {
             max-width: 100%;
             width: 100%;
             height: 100%;
             max-height: 100vh;
             border-radius: 0;
        }
        /* Style for active filter/tab button */
        .btn.active {
            background-color: #2563eb; /* blue-600 */
            color: white;
        }
        .course-card-bg {
            background-size: cover;
            background-position: center;
            position: relative;
        }
        .course-card-overlay {
            background-color: rgba(0, 0, 0, 0.5);
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 1;
        }
        .course-card-content {
            position: relative;
            z-index: 2;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <!-- Header Section -->
        <header class="text-center mb-8">
            <h1 class="text-4xl sm:text-5xl font-bold text-gray-900">Disc Golf Finder</h1>
            <p class="text-lg text-gray-600 mt-2">A community-driven course directory</p>
        </header>

        <!-- Controls Section -->
        <div class="mb-8 p-4 bg-white rounded-lg shadow-md">
             <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
                <!-- Search and Filters -->
                <div class="lg:col-span-2 flex flex-col sm:flex-row gap-4">
                    <input type="text" id="search-input" placeholder="Search by course name..." class="w-full sm:w-auto flex-grow p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <div class="flex items-center justify-center gap-2">
                        <button class="btn filter-btn active px-4 py-2 bg-gray-200 rounded-lg font-semibold hover:bg-gray-300 transition-colors text-sm" data-filter="all">All</button>
                        <button class="btn filter-btn px-4 py-2 bg-gray-200 rounded-lg font-semibold hover:bg-gray-300 transition-colors text-sm" data-filter="9-holes">9 Holes</button>
                        <button class="btn filter-btn px-4 py-2 bg-gray-200 rounded-lg font-semibold hover:bg-gray-300 transition-colors text-sm" data-filter="18-plus-holes">18+ Holes</button>
                    </div>
                </div>
                <!-- Action Buttons -->
                <div class="flex items-center justify-center lg:justify-end gap-2 flex-wrap">
                    <button id="lost-found-btn" class="flex-grow lg:flex-grow-0 bg-yellow-500 text-white font-bold py-2 px-6 rounded-lg hover:bg-yellow-600 transition-colors">Lost & Found</button>
                    <button id="my-scores-btn" class="flex-grow lg:flex-grow-0 bg-purple-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-purple-700 transition-colors">My Scores</button>
                    <button id="add-course-btn" class="flex-grow lg:flex-grow-0 bg-green-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors">Add Course</button>
                </div>
            </div>
        </div>

        <!-- Course Listings -->
        <main id="course-listings" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Course cards will be dynamically inserted here -->
        </main>
        
        <div id="no-results" class="text-center py-12 text-gray-500 text-xl" style="display: none;">
            No courses match your search.
        </div>

        <!-- Footer -->
        <footer class="text-center mt-12 py-4 border-t border-gray-300">
            <p class="text-gray-500">&copy; 2025 Disc Golf Finder. Happy throwing!</p>
        </footer>
    </div>

    <!-- Add Course Modal -->
    <div id="add-course-modal-backdrop" class="modal-backdrop">
        <form id="add-course-form" class="modal bg-white rounded-lg shadow-xl flex flex-col">
            <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 class="text-2xl font-bold">Add a New Course</h2>
                <button type="button" id="close-add-course-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div class="p-6 flex-grow overflow-y-auto space-y-4">
                <div>
                    <label for="course-name" class="block text-sm font-medium text-gray-700">Course Name</label>
                    <input type="text" id="course-name" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="course-location" class="block text-sm font-medium text-gray-700">Location (e.g., City, ST)</label>
                    <input type="text" id="course-location" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                 <div>
                    <label for="course-holes" class="block text-sm font-medium text-gray-700">Number of Holes</label>
                    <input type="number" id="course-holes" required min="1" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="course-difficulty" class="block text-sm font-medium text-gray-700">Difficulty</label>
                    <select id="course-difficulty" required class="mt-1 block w-full p-2 border border-gray-300 bg-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <option>Beginner</option>
                        <option>Moderate</option>
                        <option>Challenging</option>
                        <option>Professional</option>
                        <option>Very Challenging</option>
                    </select>
                </div>
                <div>
                    <label for="course-description" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="course-description" rows="3" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
                </div>
                 <div>
                    <label for="course-distances" class="block text-sm font-medium text-gray-700">Hole Distances (comma-separated, e.g., 250,300,275)</label>
                    <input type="text" id="course-distances" required pattern="^(\d+,\s*)*\d+$" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                 <div>
                    <label for="course-image-url" class="block text-sm font-medium text-gray-700">Image URL</label>
                    <input type="url" id="course-image-url" class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
            </div>
            <div class="p-4 bg-gray-50 border-t border-gray-200 flex justify-end">
                <button type="submit" class="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition-colors">Submit Course</button>
            </div>
        </form>
    </div>

    <!-- Comments Modal -->
    <div id="comments-modal-backdrop" class="modal-backdrop">
        <div id="comments-modal" class="modal bg-white rounded-lg shadow-xl flex flex-col">
            <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 id="modal-title" class="text-2xl font-bold">Comments</h2>
                <button id="close-comments-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div id="comments-list" class="p-4 flex-grow overflow-y-auto"></div>
            <div class="p-4 border-t border-gray-200">
                <div class="flex gap-2">
                    <textarea id="comment-input" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" rows="2" placeholder="Add a comment..."></textarea>
                    <button id="submit-comment-btn" class="bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-300">Post</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scorecard Modal -->
    <div id="scorecard-modal-backdrop" class="modal-backdrop fullscreen-modal">
        <div id="scorecard-modal" class="modal fullscreen-modal bg-white flex flex-col">
            <header class="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 id="scorecard-title" class="text-2xl font-bold">Scorecard</h2>
                <button id="close-scorecard-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </header>
            <main id="scorecard-body" class="flex-grow overflow-y-auto p-4 space-y-2"></main>
            <footer class="p-4 bg-gray-50 border-t border-gray-200 flex justify-between items-center">
                <div class="text-xl font-bold">Total Score: <span id="total-score">0</span></div>
                <button id="save-score-btn" class="bg-green-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-green-700 transition-colors">Save Round</button>
            </footer>
        </div>
    </div>
    
    <!-- My Scores Modal -->
    <div id="my-scores-modal-backdrop" class="modal-backdrop">
        <div id="my-scores-modal" class="modal bg-white rounded-lg shadow-xl flex flex-col">
            <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 class="text-2xl font-bold">My Saved Scores</h2>
                <button id="close-my-scores-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div id="my-scores-list" class="p-4 flex-grow overflow-y-auto">
            </div>
        </div>
    </div>
    
    <!-- Lost & Found Modal -->
    <div id="lost-found-modal-backdrop" class="modal-backdrop">
        <div class="modal bg-white rounded-lg shadow-xl flex flex-col">
             <div class="p-4 border-b border-gray-200 flex justify-between items-center">
                <h2 class="text-2xl font-bold">Lost & Found</h2>
                <button type="button" id="close-lost-found-modal-btn" class="text-gray-500 hover:text-gray-800 text-3xl leading-none">&times;</button>
            </div>
            <div class="flex border-b">
                <button id="view-lost-tab-btn" class="btn active flex-1 p-4 font-semibold">View Lost Items</button>
                <button id="report-lost-tab-btn" class="btn flex-1 p-4 font-semibold bg-gray-100">Report a Lost Disc</button>
            </div>
            <!-- View Lost Items -->
            <div id="view-lost-section" class="p-4 flex-grow overflow-y-auto">
                <!-- Lost items will be loaded here -->
            </div>
            <!-- Report Lost Disc Form -->
            <form id="report-lost-form" class="p-6 space-y-4" style="display: none;">
                <div>
                    <label for="lost-disc-type" class="block text-sm font-medium text-gray-700">Disc Type (e.g., Innova Destroyer)</label>
                    <input type="text" id="lost-disc-type" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="lost-disc-color" class="block text-sm font-medium text-gray-700">Color</label>
                    <input type="text" id="lost-disc-color" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <div>
                    <label for="lost-course-name" class="block text-sm font-medium text-gray-700">Course Where Lost</label>
                    <select id="lost-course-name" required class="mt-1 block w-full p-2 border border-gray-300 bg-white rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                        <!-- Course options will be populated here -->
                    </select>
                </div>
                <div>
                    <label for="lost-contact-info" class="block text-sm font-medium text-gray-700">Contact Info (Phone or Email)</label>
                    <input type="text" id="lost-contact-info" required class="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
                </div>
                <button type="submit" class="w-full bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition-colors">Submit Report</button>
            </form>
        </div>
    </div>

    <script type="module">
        // --- Firebase SDK Imports ---
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, query, where, onSnapshot, serverTimestamp, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- Firebase Configuration ---
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- Initialize Firebase ---
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        
        let userId = null;
        let allCourses = [];
        const coursesCollectionPath = `/artifacts/${appId}/public/data/courses`;
        const coursesCollectionRef = collection(db, coursesCollectionPath);
        
        // --- Authenticate User ---
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                console.log("User is signed in with UID:", userId);
                listenForCourses();
            } else {
                 try {
                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                } catch (error) {
                    console.error("Error during sign-in:", error);
                }
            }
        });
        
        // --- Listen for real-time updates to courses collection ---
        function listenForCourses() {
            onSnapshot(coursesCollectionRef, (snapshot) => {
                allCourses = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                updateCourseDisplay();
                populateLostCourseDropdown();
                seedDatabaseIfNeeded();
            });
        }
        
        // --- Seed Database with Initial Courses (runs only if collection is empty) ---
        async function seedDatabaseIfNeeded() {
            const snapshot = await getDocs(coursesCollectionRef);
            if (snapshot.empty) {
                console.log("Course collection is empty. Seeding initial data...");
                const initialCourses = [
                    { name: "Highland Hills Park", location: "Fort Thomas, KY", holes: 9, difficulty: "Moderate", description: "A beautiful, wooded course with significant elevation changes. Great for beginners and rarely crowded. A quick and fun round.", lat: 39.080299, lon: -84.454498, distances: [232, 298, 132, 258, 250, 366, 255, 290, 316], imageUrl: "https://www.fortthomasmatters.com/wp-content/uploads/2022/07/293996564_10159850937803259_414929555625983792_n.jpeg" },
                    { name: "Devou Park", location: "Covington, KY", holes: 18, difficulty: "Challenging", description: "A newer, challenging 18-hole course that meanders through the scenic and hilly woods of Devou Park. Requires a variety of shots.", lat: 39.0837, lon: -84.5226, distances: [310, 255, 410, 280, 330, 290, 515, 300, 270, 350, 240, 450, 305, 380, 260, 390, 320, 400], imageUrl: "https://images.squarespace-cdn.com/content/v1/5e74f34636258d4119d43b9c/1585854817124-7Q0X43TTE2A0T1X9J9K4/20190829_130545.jpg" },
                    { name: "Mt. Airy Forest", location: "Cincinnati, OH", holes: 18, difficulty: "Professional", description: "A world-class course that has hosted professional tournaments. Features long, tight fairways and demands precision. A true test of skill.", lat: 39.1715, lon: -84.5619, distances: [345, 520, 310, 480, 300, 610, 280, 450, 330, 410, 370, 550, 390, 420, 360, 500, 320, 490], imageUrl: "https://www.cincinnatiparks.com/wp-content/uploads/2022/02/Mt-Airy-Arboretum-scaled.jpg" },
                    { name: "Idlewild", location: "Burlington, KY", holes: 24, difficulty: "Very Challenging", description: "Consistently ranked as one of the top courses in the world. A monster course with extreme length, water carries, and punishing rough.", lat: 39.0225, lon: -84.7175, distances: [420, 550, 310, 480, 620, 340, 710, 430, 300, 850, 400, 580, 370, 490, 600, 320, 950, 410, 530, 380, 460, 510, 390, 1050], imageUrl: "https://www.bcedp.com/wp-content/uploads/2021/08/Idlewild-Park-and-Lake-scaled.jpg" }
                ];
                for (const course of initialCourses) {
                    await addDoc(coursesCollectionRef, course);
                }
            }
        }

        // --- UI Elements ---
        const searchInput = document.getElementById('search-input');
        const filterButtons = document.querySelectorAll('.filter-btn');
        const courseListingsContainer = document.getElementById('course-listings');
        const noResultsDiv = document.getElementById('no-results');

        // --- Filter State ---
        let currentSearchTerm = '';
        let activeFilter = 'all';

        // --- Event Listeners for Search and Filter ---
        searchInput.addEventListener('input', (e) => {
            currentSearchTerm = e.target.value;
            updateCourseDisplay();
        });

        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                activeFilter = btn.dataset.filter;
                updateCourseDisplay();
            });
        });

        // --- Function to Display Filtered Courses ---
        function updateCourseDisplay() {
            let filteredCourses = allCourses.filter(course => {
                const matchesSearch = course.name.toLowerCase().includes(currentSearchTerm.toLowerCase());
                let matchesFilter = false;
                if (activeFilter === 'all') {
                    matchesFilter = true;
                } else if (activeFilter === '9-holes') {
                    matchesFilter = course.holes === 9;
                } else if (activeFilter === '18-plus-holes') {
                    matchesFilter = course.holes >= 18;
                }
                return matchesSearch && matchesFilter;
            });
            renderCourses(filteredCourses);
        }

        // --- Function to Render Course Cards ---
        function renderCourses(coursesToRender) {
            courseListingsContainer.innerHTML = '';
            noResultsDiv.style.display = coursesToRender.length === 0 ? 'block' : 'none';

            coursesToRender.forEach(course => {
                const card = document.createElement('div');
                card.className = 'course-card-bg bg-white rounded-lg shadow-md overflow-hidden flex flex-col justify-between transform hover:scale-105 transition-transform duration-300 ease-in-out';
                if (course.imageUrl) {
                    card.style.backgroundImage = `url('${course.imageUrl}')`;
                }
                const totalDistance = course.distances.reduce((sum, current) => sum + current, 0);
                card.innerHTML = `
                    <div class="course-card-overlay"></div>
                    <div class="course-card-content p-6 text-white">
                        <h2 class="text-2xl font-bold mb-2">${course.name}</h2>
                        <div class="flex items-center mb-4">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path></svg>
                            <span>${course.location}</span>
                        </div>
                        <div class="flex flex-wrap gap-2 items-center text-sm mb-4">
                            <span class="bg-blue-200 text-blue-800 px-3 py-1 rounded-full font-semibold">${course.holes} Holes</span>
                            <span class="bg-purple-200 text-purple-800 px-3 py-1 rounded-full font-semibold">${totalDistance.toLocaleString()} ft</span>
                            <span class="bg-green-200 text-green-800 px-3 py-1 rounded-full font-semibold">${course.difficulty}</span>
                        </div>
                        <p>${course.description}</p>
                    </div>
                    <div class="course-card-content p-4 bg-gray-900 bg-opacity-50 border-t border-gray-700 grid grid-cols-3 gap-2">
                        <button data-course-id="${course.id}" class="start-round-btn block w-full text-center bg-orange-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-600 transition-colors duration-300 col-span-1">Play</button>
                        <a href="https://www.google.com/maps?q=${course.lat || ''},${course.lon || ''}" target="_blank" rel="noopener noreferrer" class="block w-full text-center bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors duration-300">Map</a>
                        <button data-course-name="${course.name}" class="comments-btn block w-full text-center bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors duration-300">Comments</button>
                    </div>
                `;
                courseListingsContainer.appendChild(card);
            });
            // Re-add event listeners
            document.querySelectorAll('.comments-btn').forEach(btn => {
                btn.addEventListener('click', () => openCommentsModal(btn.dataset.courseName));
            });
            document.querySelectorAll('.start-round-btn').forEach(btn => {
                btn.addEventListener('click', () => openScorecardModal(btn.dataset.courseId));
            });
        }

        // --- Add Course Modal Logic ---
        const addCourseModalBackdrop = document.getElementById('add-course-modal-backdrop');
        const addCourseBtn = document.getElementById('add-course-btn');
        const closeAddCourseModalBtn = document.getElementById('close-add-course-modal-btn');
        const addCourseForm = document.getElementById('add-course-form');

        addCourseBtn.addEventListener('click', () => addCourseModalBackdrop.style.display = 'flex');
        closeAddCourseModalBtn.addEventListener('click', () => addCourseModalBackdrop.style.display = 'none');
        
        addCourseForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const distancesStr = document.getElementById('course-distances').value;
            const distances = distancesStr.split(',').map(s => parseInt(s.trim(), 10)).filter(n => !isNaN(n));

            const newCourse = {
                name: document.getElementById('course-name').value,
                location: document.getElementById('course-location').value,
                holes: parseInt(document.getElementById('course-holes').value, 10),
                difficulty: document.getElementById('course-difficulty').value,
                description: document.getElementById('course-description').value,
                distances: distances,
                imageUrl: document.getElementById('course-image-url').value,
                lat: 0,
                lon: 0
            };

            try {
                await addDoc(coursesCollectionRef, newCourse);
                addCourseForm.reset();
                addCourseModalBackdrop.style.display = 'none';
            } catch (error) {
                console.error("Error adding new course: ", error);
            }
        });

        // --- Comments Modal Logic ---
        const commentsModalBackdrop = document.getElementById('comments-modal-backdrop');
        const modalTitle = document.getElementById('modal-title');
        const closeCommentsModalBtn = document.getElementById('close-comments-modal-btn');
        const commentsList = document.getElementById('comments-list');
        const commentInput = document.getElementById('comment-input');
        const submitCommentBtn = document.getElementById('submit-comment-btn');
        let currentCourseName = null;
        let unsubscribeComments = null;

        function openCommentsModal(courseName) {
            currentCourseName = courseName;
            modalTitle.textContent = `Comments for ${courseName}`;
            commentsModalBackdrop.style.display = 'flex';
            
            const commentsCollectionPath = `/artifacts/${appId}/public/data/comments`;
            const q = query(collection(db, commentsCollectionPath), where("courseName", "==", courseName));
            
            unsubscribeComments = onSnapshot(q, (querySnapshot) => {
                commentsList.innerHTML = '';
                const docs = querySnapshot.docs.sort((a, b) => (b.data().timestamp?.toMillis() || 0) - (a.data().timestamp?.toMillis() || 0));
                if (docs.length === 0) {
                    commentsList.innerHTML = '<p class="text-gray-500">No comments yet. Be the first!</p>';
                } else {
                    docs.forEach((doc) => {
                        const comment = doc.data();
                        const commentEl = document.createElement('div');
                        commentEl.className = 'bg-gray-100 p-3 rounded-lg mb-3';
                        const date = comment.timestamp ? comment.timestamp.toDate().toLocaleString() : 'Just now';
                        commentEl.innerHTML = `
                            <p class="text-gray-800">${comment.text}</p>
                            <p class="text-xs text-gray-500 mt-1">Posted by User...${comment.userId.slice(-4)} on ${date}</p>
                        `;
                        commentsList.appendChild(commentEl);
                    });
                }
            });
        }

        function closeCommentsModal() {
            if (unsubscribeComments) unsubscribeComments();
            commentsModalBackdrop.style.display = 'none';
        }

        async function handlePostComment() {
            const text = commentInput.value.trim();
            if (text && currentCourseName && userId) {
                try {
                    const commentsCollectionPath = `/artifacts/${appId}/public/data/comments`;
                    await addDoc(collection(db, commentsCollectionPath), {
                        courseName: currentCourseName,
                        text: text,
                        userId: userId,
                        timestamp: serverTimestamp()
                    });
                    commentInput.value = '';
                } catch (error) {
                    console.error("Error adding document: ", error);
                }
            }
        }

        closeCommentsModalBtn.addEventListener('click', closeCommentsModal);
        submitCommentBtn.addEventListener('click', handlePostComment);

        // --- Scorecard Modal Logic ---
        const scorecardModalBackdrop = document.getElementById('scorecard-modal-backdrop');
        const scorecardTitle = document.getElementById('scorecard-title');
        const scorecardBody = document.getElementById('scorecard-body');
        const totalScoreEl = document.getElementById('total-score');
        const closeScorecardBtn = document.getElementById('close-scorecard-modal-btn');
        const saveScoreBtn = document.getElementById('save-score-btn');
        let currentCourseForScorecard = null;

        function openScorecardModal(courseId) {
            currentCourseForScorecard = allCourses.find(c => c.id === courseId);
            if (!currentCourseForScorecard) return;

            scorecardTitle.textContent = `Playing ${currentCourseForScorecard.name}`;
            scorecardBody.innerHTML = '';
            
            for (let i = 0; i < currentCourseForScorecard.holes; i++) {
                const holeNum = i + 1;
                const distance = currentCourseForScorecard.distances[i] || 'N/A';
                const holeRow = document.createElement('div');
                holeRow.className = 'grid grid-cols-3 items-center gap-4 p-2 rounded-lg bg-gray-100';
                holeRow.innerHTML = `
                    <div class="font-bold">Hole ${holeNum}</div>
                    <div class="text-center text-gray-600">${distance} ft</div>
                    <input type="number" min="1" class="score-input w-full p-2 border border-gray-300 rounded-md text-center" data-hole="${holeNum}">
                `;
                scorecardBody.appendChild(holeRow);
            }
            
            updateTotalScore();
            scorecardModalBackdrop.style.display = 'flex';
        }

        function updateTotalScore() {
            const scoreInputs = document.querySelectorAll('.score-input');
            let total = 0;
            scoreInputs.forEach(input => {
                total += parseInt(input.value, 10) || 0;
            });
            totalScoreEl.textContent = total;
        }

        function closeScorecardModal() {
            scorecardModalBackdrop.style.display = 'none';
        }

        async function saveScorecard() {
            if (!currentCourseForScorecard || !userId) return;

            const scores = {};
            document.querySelectorAll('.score-input').forEach(input => {
                scores[input.dataset.hole] = parseInt(input.value, 10) || 0;
            });
            const totalScore = Object.values(scores).reduce((sum, val) => sum + val, 0);
            
            const scorecardData = {
                userId: userId,
                courseId: currentCourseForScorecard.id,
                courseName: currentCourseForScorecard.name,
                scores: scores,
                totalScore: totalScore,
                date: serverTimestamp()
            };

            try {
                const scorecardsCollectionPath = `/artifacts/${appId}/users/${userId}/scorecards`;
                await addDoc(collection(db, scorecardsCollectionPath), scorecardData);
                closeScorecardModal();
            } catch (error) {
                console.error("Error saving scorecard: ", error);
            }
        }
        
        scorecardBody.addEventListener('input', updateTotalScore);
        closeScorecardBtn.addEventListener('click', closeScorecardModal);
        saveScoreBtn.addEventListener('click', saveScorecard);

        // --- My Scores Modal Logic ---
        const myScoresModalBackdrop = document.getElementById('my-scores-modal-backdrop');
        const myScoresBtn = document.getElementById('my-scores-btn');
        const closeMyScoresBtn = document.getElementById('close-my-scores-modal-btn');
        const myScoresList = document.getElementById('my-scores-list');
        let unsubscribeScores = null;

        function openMyScoresModal() {
            if (!userId) return;
            myScoresModalBackdrop.style.display = 'flex';
            const scorecardsCollectionPath = `/artifacts/${appId}/users/${userId}/scorecards`;
            const q = query(collection(db, scorecardsCollectionPath));

            unsubscribeScores = onSnapshot(q, (snapshot) => {
                myScoresList.innerHTML = '';
                const docs = snapshot.docs.sort((a, b) => (b.data().date?.toMillis() || 0) - (a.data().date?.toMillis() || 0));
                if (docs.length === 0) {
                    myScoresList.innerHTML = '<p class="text-gray-500">You have no saved scores yet. Go play a round!</p>';
                } else {
                    docs.forEach(doc => {
                        const score = doc.data();
                        const scoreEl = document.createElement('div');
                        scoreEl.className = 'bg-gray-100 p-3 rounded-lg mb-3';
                        const date = score.date ? score.date.toDate().toLocaleDateString() : 'N/A';
                        scoreEl.innerHTML = `
                            <div class="flex justify-between items-center">
                                <span class="font-bold">${score.courseName}</span>
                                <span class="text-xl font-bold text-blue-600">${score.totalScore}</span>
                            </div>
                            <p class="text-xs text-gray-500 mt-1">${date}</p>
                        `;
                        myScoresList.appendChild(scoreEl);
                    });
                }
            });
        }

        function closeMyScoresModal() {
            if (unsubscribeScores) unsubscribeScores();
            myScoresModalBackdrop.style.display = 'none';
        }

        myScoresBtn.addEventListener('click', openMyScoresModal);
        closeMyScoresBtn.addEventListener('click', closeMyScoresModal);
        
        // --- Lost & Found Modal Logic ---
        const lostFoundModalBackdrop = document.getElementById('lost-found-modal-backdrop');
        const lostFoundBtn = document.getElementById('lost-found-btn');
        const closeLostFoundBtn = document.getElementById('close-lost-found-modal-btn');
        const viewLostTab = document.getElementById('view-lost-tab-btn');
        const reportLostTab = document.getElementById('report-lost-tab-btn');
        const viewLostSection = document.getElementById('view-lost-section');
        const reportLostForm = document.getElementById('report-lost-form');
        const lostCourseDropdown = document.getElementById('lost-course-name');
        const lostItemsList = document.getElementById('view-lost-section');
        let unsubscribeLostItems = null;

        function populateLostCourseDropdown() {
            lostCourseDropdown.innerHTML = '<option value="">Select a Course</option>';
            allCourses.forEach(course => {
                const option = document.createElement('option');
                option.value = course.name;
                option.textContent = course.name;
                lostCourseDropdown.appendChild(option);
            });
        }

        function openLostFoundModal() {
            lostFoundModalBackdrop.style.display = 'flex';
            listenForLostItems();
        }

        function closeLostFoundModal() {
            if (unsubscribeLostItems) unsubscribeLostItems();
            lostFoundModalBackdrop.style.display = 'none';
        }

        function listenForLostItems() {
            const lostAndFoundCollectionPath = `/artifacts/${appId}/public/data/lostandfound`;
            const q = query(collection(db, lostAndFoundCollectionPath));

            unsubscribeLostItems = onSnapshot(q, (snapshot) => {
                lostItemsList.innerHTML = '';
                const docs = snapshot.docs.sort((a, b) => (b.data().timestamp?.toMillis() || 0) - (a.data().timestamp?.toMillis() || 0));
                if (docs.length === 0) {
                    lostItemsList.innerHTML = '<p class="text-gray-500">No lost items reported yet.</p>';
                } else {
                    docs.forEach(doc => {
                        const item = doc.data();
                        const itemEl = document.createElement('div');
                        itemEl.className = 'bg-gray-100 p-3 rounded-lg mb-3';
                        const date = item.timestamp ? item.timestamp.toDate().toLocaleDateString() : 'N/A';
                        itemEl.innerHTML = `
                            <div class="font-bold text-lg">${item.discType} (${item.discColor})</div>
                            <div class="text-sm text-gray-700">Lost at: <span class="font-semibold">${item.courseName}</span> on ${date}</div>
                            <div class="text-sm text-gray-700">Contact: <span class="font-semibold">${item.contactInfo}</span></div>
                        `;
                        lostItemsList.appendChild(itemEl);
                    });
                }
            });
        }

        lostFoundBtn.addEventListener('click', openLostFoundModal);
        closeLostFoundBtn.addEventListener('click', closeLostFoundModal);

        viewLostTab.addEventListener('click', () => {
            viewLostTab.classList.add('active');
            reportLostTab.classList.remove('active');
            viewLostTab.classList.remove('bg-gray-100');
            reportLostTab.classList.add('bg-gray-100');
            viewLostSection.style.display = 'block';
            reportLostForm.style.display = 'none';
        });

        reportLostTab.addEventListener('click', () => {
            reportLostTab.classList.add('active');
            viewLostTab.classList.remove('active');
            reportLostTab.classList.remove('bg-gray-100');
            viewLostTab.classList.add('bg-gray-100');
            reportLostForm.style.display = 'block';
            viewLostSection.style.display = 'none';
        });

        reportLostForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const lostItemData = {
                discType: document.getElementById('lost-disc-type').value,
                discColor: document.getElementById('lost-disc-color').value,
                courseName: document.getElementById('lost-course-name').value,
                contactInfo: document.getElementById('lost-contact-info').value,
                timestamp: serverTimestamp(),
                reporterId: userId
            };
            
            try {
                const lostAndFoundCollectionPath = `/artifacts/${appId}/public/data/lostandfound`;
                await addDoc(collection(db, lostAndFoundCollectionPath), lostItemData);
                reportLostForm.reset();
                // Switch back to the view tab
                viewLostTab.click();
            } catch (error) {
                console.error("Error reporting lost item: ", error);
            }
        });

        // --- PWA Service Worker Registration ---
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                .then(registration => {
                    console.log('ServiceWorker registration successful');
                })
                .catch(err => {
                    console.log('ServiceWorker registration failed: ', err);
                });
            });
        }
    </script>
</body>
</html>
